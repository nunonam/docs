{"pageProps":{"frontmatter":{"title":"Automatic Rails migrations","subtitle":"To ensure PlanetScale works well with a traditional Rails development process, we implemented the ability to automatically copy Rails migration metadata as part of our deployment process."},"headings":[{"depth":2,"value":"Introduction"},{"depth":3,"value":"Quick introduction to Rails migrations"},{"depth":2,"value":"Prerequisites"},{"depth":2,"value":"Execute first Rails migration in PlanetScale"},{"depth":2,"value":"Execute succeeding Rails migrations in PlanetScale"},{"depth":2,"value":"Summary"},{"depth":2,"value":"What's next?"},{"depth":2,"value":"Need help?"}],"body":{"compiledSource":"var d=Object.defineProperty,c=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(a,n,t)=>n in a?d(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))l.call(n,t)&&s(a,t,n[t]);if(o)for(var t of o(n))r.call(n,t)&&s(a,t,n[t]);return a},p=(a,n)=>c(a,h(n));var m=(a,n)=>{var t={};for(var i in a)l.call(a,i)&&n.indexOf(i)<0&&(t[i]=a[i]);if(a!=null&&o)for(var i of o(a))n.indexOf(i)<0&&r.call(a,i)&&(t[i]=a[i]);return t};const makeShortcode=a=>function(t){return console.warn(\"Component \"+a+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",e({},t))},InfoBlock=makeShortcode(\"InfoBlock\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var i=t,{components:a}=i,n=m(i,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(InfoBlock,{type:\"tip\",mdxType:\"InfoBlock\"},`If you are using PlanetScale with a Rails application, go to your database's Settings page in the web app and enable \"Automatically copy migration data.\" Select \"Rails/Phoenix\" as the migration framework. When enabled, this setting updates the `,mdx(\"em\",null,\"schema_migrations\"),\" table each time you branch with the latest migration. If disabled, running\",\" \",mdx(\"em\",null,\"rake db:migrate\"),\" will try to run all migrations every time, instead of only the latest one.\"),mdx(\"h2\",null,\"Introduction\"),mdx(\"p\",null,\"In this tutorial, we\\u2019re going to learn how to run automatic Rails migrations in PlanetScale as part of our deployment process.\"),mdx(InfoBlock,{type:\"note\",mdxType:\"InfoBlock\"},\"Automatic schema migrations work with any migration tool, not just Rails. Specify the migration table name in your database's Settings page.\"),mdx(\"h3\",null,\"Quick introduction to Rails migrations\"),mdx(\"p\",null,\"Rails tracks the list of schema migrations run with an internal table called \",mdx(\"inlineCode\",{parentName:\"p\"},\"schema_migrations\"),\" in your database. These migrations are executed when running the Rails command \",mdx(\"inlineCode\",{parentName:\"p\"},\"rake db:migrate\"),\".\"),mdx(\"p\",null,\"From a high level, running \",mdx(\"inlineCode\",{parentName:\"p\"},\"rake db:migrate\"),\" does the following:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Rails looks at all of the migration files in your \",mdx(\"inlineCode\",{parentName:\"li\"},\"db/migrate\"),\" directory\"),mdx(\"li\",{parentName:\"ul\"},\"Rails runs a query against the \",mdx(\"inlineCode\",{parentName:\"li\"},\"schema_migrations\"),\" table to see which migrations have and haven't been run.\"),mdx(\"li\",{parentName:\"ul\"},\"Any migration that doesn\\u2019t appear in the \",mdx(\"inlineCode\",{parentName:\"li\"},\"schema_migrations\"),\" table is considered pending, and is executed against the database with the schema changes in the file.\")),mdx(InfoBlock,{type:\"tip\",mdxType:\"InfoBlock\"},\"When you merge a deploy request in PlanetScale, the \",mdx(\"em\",null,\"schema_migrations\"),\" table in \",mdx(\"em\",null,\"main\"),\" gets automatically updated with the migrations from your branch.\"),mdx(\"h2\",null,\"Prerequisites\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Install \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.ruby-lang.org/en/documentation/installation/\"}),\"Ruby\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"Install the \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/planetscale/cli\"}),\"PlanetScale CLI\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"Authenticate the CLI with the following command:\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`pscale auth login\n`)),mdx(\"h2\",null,\"Execute first Rails migration in PlanetScale\"),mdx(\"p\",null,\"Rails migrations follow the PlanetScale \",mdx(\"a\",e({parentName:\"p\"},{href:\"/concepts/nonblocking-schema-changes\"}),\"non-blocking schema change\"),\" workflow. First, the migration is applied to a \",mdx(\"em\",{parentName:\"p\"},\"development\"),\" branch and then the development branch is merged into the \",mdx(\"inlineCode\",{parentName:\"p\"},\"main\"),\" production database.\"),mdx(\"p\",null,\"Let's begin with an example flow for running Rails migrations in PlanetScale:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Create an \",mdx(\"inlineCode\",{parentName:\"li\"},\"add-users-table\"),\" development branch from \",mdx(\"inlineCode\",{parentName:\"li\"},\"main\"),\" and name your database \",mdx(\"em\",{parentName:\"li\"},\"blog\"),\":\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`pscale branch create blog add-users-table\n`)),mdx(\"ol\",e({},{start:2}),mdx(\"li\",{parentName:\"ol\"},\"Switch to your newly created development branch, \",mdx(\"inlineCode\",{parentName:\"li\"},\"add-users-table\"),\":\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`pscale branch switch add-users-table --database blog\n`)),mdx(\"ol\",e({},{start:3}),mdx(\"li\",{parentName:\"ol\"},\"Create a Rails migration and call it \",mdx(\"inlineCode\",{parentName:\"li\"},\"CreateUsers\"),\":\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`rails generate migration CreateUsers\n`)),mdx(\"p\",null,\"This rails command begins the migration for our table that is currently empty and generates a Ruby file that\\u2019ll be named something like this: \",mdx(\"inlineCode\",{parentName:\"p\"},\"20200405103635_create_users.rb\"),\".\"),mdx(\"ol\",e({},{start:4}),mdx(\"li\",{parentName:\"ol\"},\"We can fill in the body of this skeleton file with a few more relevant details, such as a user's name and email:\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ruby\"}),`class CreateUsers < ActiveRecord::Migration[6.1]\n  def change\n    create_table :users do |t|\n      t.string :name\n      t.string :email\n      t.timestamps\n    end\n  end\nend\n`)),mdx(\"ol\",e({},{start:5}),mdx(\"li\",{parentName:\"ol\"},\"Run \",mdx(\"inlineCode\",{parentName:\"li\"},\"rake db:migrate\"),\".\")),mdx(\"p\",null,\"This command executes a new migration against your \",mdx(\"inlineCode\",{parentName:\"p\"},\"add-users-table\"),\" \",mdx(\"em\",{parentName:\"p\"},\"development\"),\" branch.\"),mdx(\"p\",null,\"At this point, Rails creates the \",mdx(\"inlineCode\",{parentName:\"p\"},\"users\"),\" table and inserts \",mdx(\"inlineCode\",{parentName:\"p\"},\"20200405103635\"),\" into the \",mdx(\"inlineCode\",{parentName:\"p\"},\"schema_migrations\"),\" table on your development branch.\"),mdx(\"ol\",e({},{start:6}),mdx(\"li\",{parentName:\"ol\"},\"Open a deploy request for your \",mdx(\"inlineCode\",{parentName:\"li\"},\"add-users-table\"),\" branch, so that you can deploy your changes to \",mdx(\"inlineCode\",{parentName:\"li\"},\"main\"),\".\")),mdx(\"p\",null,\"This step creates the \",mdx(\"inlineCode\",{parentName:\"p\"},\"users\"),\" table in production. At this point, PlanetScale inserts \",mdx(\"inlineCode\",{parentName:\"p\"},\"20200405103635\"),\" into \",mdx(\"inlineCode\",{parentName:\"p\"},\"main\"),\"\\u2019s \",mdx(\"inlineCode\",{parentName:\"p\"},\"schema_migrations\"),\" table.\"),mdx(\"h2\",null,\"Execute succeeding Rails migrations in PlanetScale\"),mdx(\"p\",null,\"Our first example migration flow went well, but what happens when you need to run further migrations?\"),mdx(\"p\",null,\"Let\\u2019s take a look:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Create an \",mdx(\"inlineCode\",{parentName:\"li\"},\"add-index-to-users\"),\" new development branch from \",mdx(\"inlineCode\",{parentName:\"li\"},\"main\"),\":\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`pscale branch create blog add-index-to-users\n`)),mdx(\"p\",null,\"As part of creating that branch, PlanetScale copies \",mdx(\"em\",{parentName:\"p\"},\"every\"),\" row from \",mdx(\"inlineCode\",{parentName:\"p\"},\"main\"),\"\\u2019s \",mdx(\"inlineCode\",{parentName:\"p\"},\"schema_migrations\"),\" table over to your new development branch.\"),mdx(\"ol\",e({},{start:2}),mdx(\"li\",{parentName:\"ol\"},\"Switch to your newly created development branch, \",mdx(\"inlineCode\",{parentName:\"li\"},\"add-index-to-users\"),\":\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`pscale branch switch add-index-to-users --database blog\n`)),mdx(\"ol\",e({},{start:3}),mdx(\"li\",{parentName:\"ol\"},\"Create another Rails migration for your table and call it \",mdx(\"inlineCode\",{parentName:\"li\"},\"CreateUsersIndex\"),\":\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`rails generate migration CreateUsersIndex\n`)),mdx(\"p\",null,\"This rails command begins the migration for our table that is currently empty and generates a Ruby file that\\u2019ll be named something like this: \",mdx(\"inlineCode\",{parentName:\"p\"},\"20300405103635_create_users_index.rb\"),\".\"),mdx(\"ol\",e({},{start:4}),mdx(\"li\",{parentName:\"ol\"},\"We fill in the body of the skeleton file with an index on the user table's \",mdx(\"em\",{parentName:\"li\"},\"email\"),\" column:\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ruby\"}),`class CreateUsersIndex < ActiveRecord::Migration[6.1]\n  def change\n    add_index(:users, :email, unique: true)\n  end\nend\n`)),mdx(\"ol\",e({},{start:5}),mdx(\"li\",{parentName:\"ol\"},\"Run \",mdx(\"inlineCode\",{parentName:\"li\"},\"rake db:migrate\"),\" against your new \",mdx(\"em\",{parentName:\"li\"},\"development\"),\" branch.\")),mdx(\"p\",null,\"Rails queries \",mdx(\"inlineCode\",{parentName:\"p\"},\"schema_migrations\"),\" to ensure your \",mdx(\"inlineCode\",{parentName:\"p\"},\"create_users\"),\" migration already ran and proceeds to only run your new migration.\"),mdx(\"ol\",e({},{start:6}),mdx(\"li\",{parentName:\"ol\"},\"Open a deploy request for your \",mdx(\"inlineCode\",{parentName:\"li\"},\"add-index-to-users\"),\" branch, so that you can deploy these changes to \",mdx(\"inlineCode\",{parentName:\"li\"},\"main\"),\".\")),mdx(\"p\",null,\"You did it! You successfully ran automatic Rails migrations in PlanetScale.\"),mdx(\"h2\",null,\"Summary\"),mdx(\"p\",null,\"In this tutorial, we learned how to conduct our first automatic Rails migration in PlanetScale, as part of the deployment process. We also covered how to manage future migrations, so that all migration workflows can run seamlessly within the PlanetScale branching workflow.\"),mdx(\"h2\",null,\"What's next?\"),mdx(\"p\",null,\"Learn more about how PlanetScale allows you to make \",mdx(\"a\",e({parentName:\"p\"},{href:\"/concepts/nonblocking-schema-changes\"}),\"non-blocking schema changes\"),\" to your database tables, without locking or causing downtime for production databases.\"),mdx(\"h2\",null,\"Need help?\"),mdx(\"p\",null,\"Get help from \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.planetscale.com/support\"}),\"PlanetScale's support team\"),\", or join our \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/planetscale/beta/discussions\"}),\"GitHub Discussion board\"),\" to see how others are using PlanetScale.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"fields":{"slug":"tutorials/automatic-rails-migrations","lastUpdatedOn":"2021-12-25T04:33:56.320Z"}},"__N_SSG":true}