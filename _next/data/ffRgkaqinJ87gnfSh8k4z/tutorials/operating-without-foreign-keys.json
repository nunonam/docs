{"pageProps":{"frontmatter":{"title":"Operating without foreign key constraints","subtitle":"How to manage your relational data without formal foreign key constraints in your schema"},"headings":[{"depth":2,"value":"Overview"},{"depth":2,"value":"Types and behavior of FOREIGN KEY constraints"},{"depth":3,"value":"`ON DELETE CASCADE`"},{"depth":3,"value":"`ON DELETE SET NULL`"},{"depth":3,"value":"`ON DELETE NO ACTION`"},{"depth":2,"value":"How does your schema look without FOREIGN KEY constraints?"},{"depth":2,"value":"Developing an app with no FOREIGN KEY constraints"},{"depth":2,"value":"Cleaning up orphaned rows"}],"body":{"compiledSource":"var h=Object.defineProperty,c=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var l=(e,n,i)=>n in e?h(e,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[n]=i,a=(e,n)=>{for(var i in n||(n={}))r.call(n,i)&&l(e,i,n[i]);if(o)for(var i of o(n))s.call(n,i)&&l(e,i,n[i]);return e},p=(e,n)=>c(e,m(n));var d=(e,n)=>{var i={};for(var t in e)r.call(e,t)&&n.indexOf(t)<0&&(i[t]=e[t]);if(e!=null&&o)for(var t of o(e))n.indexOf(t)<0&&s.call(e,t)&&(i[t]=e[t]);return i};const makeShortcode=e=>function(i){return console.warn(\"Component \"+e+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",a({},i))},InfoBlock=makeShortcode(\"InfoBlock\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var t=i,{components:e}=t,n=d(t,[\"components\"]);return mdx(MDXLayout,p(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"Overview\"),mdx(\"p\",null,'A foreign key is a logical association of rows between two tables, in a parent-child relationship. A row in a \"parent\" table may be referenced by one or more rows in a \"child\" table. A foreign key typically suggests how you should ',mdx(\"inlineCode\",{parentName:\"p\"},\"JOIN\"),\" tables in most queries. It is possible for a table to refer onto itself, as a special case.\"),mdx(\"p\",null,\"A \",mdx(\"inlineCode\",{parentName:\"p\"},\"FOREIGN KEY\"),\" \",mdx(\"em\",{parentName:\"p\"},\"constraint\"),\" is a database construct, an implementation that \",mdx(\"em\",{parentName:\"p\"},\"forces\"),\" the foreign key relationship's integrity (aka referential integrity). Namely, it ensures that a child table can only reference a parent table when the appropriate row \",mdx(\"em\",{parentName:\"p\"},\"exists\"),' in the parent table. A constraint prevents the existence of such \"orphaned rows\" in different methods, described below.'),mdx(\"p\",null,\"PlanetScale doesn't support \",mdx(\"inlineCode\",{parentName:\"p\"},\"FOREIGN KEY\"),' constraints. You are encouraged to use the relational model, and associate tables by \"pointing\" rows from one table to another. However, the ',mdx(\"inlineCode\",{parentName:\"p\"},\"CONSTRAINT ... FOREIGN KEY\"),\" definition is not allowed in your schemas.\"),mdx(\"p\",null,\"There are two major technical reasons why foreign key constraints are not supported:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"The way \",mdx(\"inlineCode\",{parentName:\"li\"},\"FOREIGN KEY\"),\" constraints are implemented in MySQL (or, rather, in the InnoDB storage engine) interferes with Online DDL operations. Learn more in \",mdx(\"a\",a({parentName:\"li\"},{href:\"https://vitess.io/blog/2021-06-15-online-ddl-why-no-fk/\"}),\"this Vitess blog post\"),\".\"),mdx(\"li\",{parentName:\"ol\"},\"Limited to single MySQL server scope, \",mdx(\"inlineCode\",{parentName:\"li\"},\"FOREIGN KEY\"),\" constraints are impossible to maintain once your data grows and is split over multiple database servers. This typically happens when you introduce functional partitioning/sharding and/or horizontal sharding.\")),mdx(\"p\",null,\"We believe the advantages of Online DDL: branching, developer owned schema changes and deployments, \",mdx(\"a\",a({parentName:\"p\"},{href:\"/concepts/nonblocking-schema-changes\"}),\"non-blocking schema changes\"),\" etc., and the advantages of sharding as means of unlimited scaling, outweigh the \",mdx(\"inlineCode\",{parentName:\"p\"},\"FOREIGN KEY\"),\" constraints benefits.\"),mdx(InfoBlock,{type:\"note\",mdxType:\"InfoBlock\"},\"You can still think in terms of foreign key relationships; of parent tables and child tables; of rows referencing each other. You can structure your tables in the exact same way without FOREIGN KEY constraints as you would with the constraints.\"),\" \",mdx(\"p\",null,\"To understand how to work without foreign key constraints, we must first understand foreign key functionality.\"),mdx(\"h2\",null,\"Types and behavior of FOREIGN KEY constraints\"),mdx(\"p\",null,\"Consider the following trivial parent-child table relationship:\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-sql\"}),`CREATE TABLE parent_table (\n  id INT NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE child_table (\n  id INT NOT NULL,\n  parent_id INT,\n  PRIMARY KEY (id),\n  KEY parent_id_idx (parent_id),\n  CONSTRAINT \\`child_parent_fk\\` FOREIGN KEY (parent_id) REFERENCES parent_table(id) ON DELETE NO ACTION\n);\n`)),mdx(InfoBlock,{type:\"tip\",mdxType:\"InfoBlock\"},\"In MySQL, foreign keys are only implemented by the storage engine layer, namely the default and popular InnoDB engine. A FOREIGN KEY constraint isn't a separate entity. It lives within the child's table space.\"),\" \",mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"FOREIGN KEY\"),\" constraints are available for row deletion (\",mdx(\"inlineCode\",{parentName:\"p\"},\"ON DELETE\"),\") and row updates (\",mdx(\"inlineCode\",{parentName:\"p\"},\"ON UPDATE\"),\"). In this document we discuss \",mdx(\"inlineCode\",{parentName:\"p\"},\"ON DELETE\"),\" as it is the more impactful of the two. The discussion is relevant to \",mdx(\"inlineCode\",{parentName:\"p\"},\"ON UPDATE\"),\" constraints, as well.\"),mdx(\"p\",null,\"Foreign keys further support three types of action (illustrated below for \",mdx(\"inlineCode\",{parentName:\"p\"},\"ON DELETE\"),\"):\"),mdx(\"h3\",null,mdx(\"inlineCode\",{parentName:\"h3\"},\"ON DELETE CASCADE\")),mdx(\"p\",null,\"This is the most greedy, or ambitious action type. If you \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" a row from a parent table, any referencing rows in a child table are subsequently deleted within the same transaction. This operation runs recursively for all of a parent's children, as well as for their children, should they also employ \",mdx(\"inlineCode\",{parentName:\"p\"},\"ON DELETE CASCADE\"),\".\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"ON DELETE CASCADE\"),\" is a risky and resource consuming action. You intend to \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" a single row, but end up deleting hundreds, thousands, or more, rows in multiple tables. What seemed like a simple transaction now turns into a massive operation, that involves excessive locking, increased MVCC overhead, impact on replication lag, and more.\"),mdx(\"p\",null,\"But perhaps the greatest danger is the potential unexpected loss of data. Whether an unsuspecting developer simply assumes a \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE FROM parent_table WHERE id=3\"),\" will at most delete one row, down to surprising behavior such as in \",mdx(\"inlineCode\",{parentName:\"p\"},\"REPLACE INTO\"),\" queries, which actually run an implicit \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\", leading to mass destruction of data.\"),mdx(\"p\",null,\"The use of \",mdx(\"inlineCode\",{parentName:\"p\"},\"ON DELETE CASCADE\"),\" is controversial. Use it with great care. Consider using \",mdx(\"inlineCode\",{parentName:\"p\"},\"NO ACTION\"),\" instead.\"),mdx(\"h3\",null,mdx(\"inlineCode\",{parentName:\"h3\"},\"ON DELETE SET NULL\")),mdx(\"p\",null,\"With this setup, a \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" on a parent (e.g. \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE FROM parent_table WHERE id=3\"),\") will set the referencing column on children (e.g. \",mdx(\"inlineCode\",{parentName:\"p\"},\"parent_id\"),\" column in \",mdx(\"inlineCode\",{parentName:\"p\"},\"child_table\"),\") to \",mdx(\"inlineCode\",{parentName:\"p\"},\"NULL\"),\" for matching rows. It effectively leads to orphaned rows, not very differently from having no foreign key constraints at all.\"),mdx(\"p\",null,\"One advantage is that it's easy to identify the orphan rows: those, and only those rows, will have \",mdx(\"inlineCode\",{parentName:\"p\"},\"NULL\"),\" for parent-referencing columns.\"),mdx(\"p\",null,\"Like \",mdx(\"inlineCode\",{parentName:\"p\"},\"CASCADE\"),\", a single row deletion on the parent may lead to multiple rows updated on child tables. This again may cause large transactions, excessive locking, and replication lag.\"),mdx(\"h3\",null,mdx(\"inlineCode\",{parentName:\"h3\"},\"ON DELETE NO ACTION\")),mdx(\"p\",null,\"Possibly the single most important feature of foreign keys, a \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" on a parent will fail if child rows exist that reference the parent's row. To \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" a row from a parent, the app/user must first \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" the referencing rows from all children. Recursively, if those are further referenced by other tables, the app/user must first \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" rows from grandchildren, and so forth.\"),mdx(\"p\",null,\"This action (or lack thereof) type forces the app to have stronger ownership of its data. An app written to work with \",mdx(\"inlineCode\",{parentName:\"p\"},\"ON DELETE NO ACTION\"),\" will organically evolve \",mdx(\"em\",{parentName:\"p\"},\"knowing\"),\" which tables reference which other tables, and will have established \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\"/\",mdx(\"inlineCode\",{parentName:\"p\"},\"UPDATE\"),\" flows that iterate through tables in the correct order so as to satisfy referential integrity.\"),mdx(\"h2\",null,\"How does your schema look without FOREIGN KEY constraints?\"),mdx(\"p\",null,\"The above schema would look exactly the same, minus the \",mdx(\"inlineCode\",{parentName:\"p\"},\"CONSTRAINT\"),\" clause:\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-sql\"}),`CREATE TABLE parent_table (\n  id INT NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE child_table (\n  id INT NOT NULL,\n  parent_id INT,\n  PRIMARY KEY (id),\n  KEY parent_id_idx (parent_id)\n);\n`)),mdx(InfoBlock,{type:\"tip\",mdxType:\"InfoBlock\"},\"Each FOREIGN KEY constraint requires an index covering the referenced column(s) on both sides of the connection. The index parent_id_idx is \",mdx(\"i\",null,\"required\"),\" by the constraint. We can drop that key in our constraint-free table, depending on the type of queries we might use to retrieve data from the tables.\"),\" \",mdx(\"h2\",null,\"Developing an app with no FOREIGN KEY constraints\"),mdx(\"p\",null,\"Consider an app's behavior in a \",mdx(\"inlineCode\",{parentName:\"p\"},\"ON DELETE NO ACTION\"),\" setup again: the app \",mdx(\"em\",{parentName:\"p\"},\"knows\"),\" the tables dependencies, handles iteration order for \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\"/\",mdx(\"inlineCode\",{parentName:\"p\"},\"UPDATE\"),\". It does everything right.\"),mdx(\"p\",null,\"What happens if we take away the \",mdx(\"inlineCode\",{parentName:\"p\"},\"CONSTRAINT\"),\" at this point?\"),mdx(\"p\",null,\"The app remains unchanged. It already runs the proper actions in the proper order. The app operation that ends up running the \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE FROM parent_table WHERE id=3\"),\" succeeds the app operations that \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" the child table(s). While we lose the database's safety guarantee enforcing this behavior, we are perfectly capable of managing it on our own.\"),mdx(\"p\",null,\"Likewise, an app that grows with a constraint-less schema, organically learns to handle \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"UPDATE\"),\" scenarios. It is in fact given some extra freedom, because the \",mdx(\"em\",{parentName:\"p\"},\"order\"),\" of operations is not enforced. This is an advantage, because the app is not forced to \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" thousands of dependent rows for each parent row deletion \",mdx(\"em\",{parentName:\"p\"},\"at that same transaction\"),\". The app may well postpone deletion as we discuss shortly.\"),mdx(\"p\",null,\"Referential integrity is but one of many logical data integrity constraints, it just happens to be one that databases are able to enforce. Any sizeable application will maintain the integrity of its data with rules the database is unaware of.\"),mdx(\"h2\",null,\"Cleaning up orphaned rows\"),mdx(\"p\",null,\"Consider an \",mdx(\"inlineCode\",{parentName:\"p\"},\"ON DELETE SET NULL\"),\" constraint. What happens to the child rows that were set to \",mdx(\"inlineCode\",{parentName:\"p\"},\"NULL\"),\"? Typically, there is little or no damage in keeping them around. A query can, for example, \",mdx(\"inlineCode\",{parentName:\"p\"},\"SELECT\"),\" rows \",mdx(\"inlineCode\",{parentName:\"p\"},\"WHERE parent_id IS NOT NULL\"),\". Better yet, child rows are often \",mdx(\"inlineCode\",{parentName:\"p\"},\"JOIN\"),\"ed with their respective parent rows. Any query running such a \",mdx(\"inlineCode\",{parentName:\"p\"},\"JOIN\"),\" will return empty, since the parent row does not exist.\"),mdx(\"p\",null,\"Eventually, those rows will pile up, and you will want to reclaim the space.\"),mdx(\"p\",null,\"Without \",mdx(\"inlineCode\",{parentName:\"p\"},\"FOREIGN KEY\"),\" constraints, the situation is very much the same, It is possible to \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" a parent row without deleting its dependant children rows. A child row \",mdx(\"inlineCode\",{parentName:\"p\"},\"JOIN\"),\"ed with a respective (deleted) parent row comes out empty. There is no \",mdx(\"inlineCode\",{parentName:\"p\"},\"IS NOT NULL\"),\" to help you, but identifying those rows is still trivial. Similarly, there is little or no damage in keeping those rows around for a while.\"),mdx(\"p\",null,\"And similarly, those rows eventually pile up.\"),mdx(\"p\",null,\"A common practice, where appropriate, is to \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" rows on a parent table, or perhaps also on a subset of children, but leave some other tables for offline batch processing.\"),mdx(\"p\",null,\"At some convenient time, such as low traffic hours, the app or some batch job will purge orphaned rows. Consider this simplified query:\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-sql\"}),`DELETE FROM child_table LEFT JOIN parent_table ON (child_table.parent_id=parent_table.id) WHERE parent_table.id IS NULL\n`)),mdx(\"p\",null,\"A single \",mdx(\"inlineCode\",{parentName:\"p\"},\"DELETE\"),\" is likely a massive operation, which is to be avoided. A good practice is to break the statement into multiple small-scope statements, e.g. deleting \",mdx(\"inlineCode\",{parentName:\"p\"},\"100\"),\" rows at a time.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"fields":{"slug":"tutorials/operating-without-foreign-keys","lastUpdatedOn":"2021-12-25T04:33:56.646Z"}},"__N_SSG":true}